/*
 * UDPCommunication.cpp
 *
 *  Created on: Jan 16, 2018
 *      Author: gferro
 */

#include "UDPCommunication.h"
#include "AdvancedErrorManagement.h"
#include "UDPCommunicationReader.h"
#include "UDPCommunicationWriter.h"

#include <string.h>
extern "C" {
#include "xparameters.h"
#include "netif/xadapter.h"
#include "platform.h"
#include "platform_config.h"
#include "lwip/tcp.h"
#include "xil_cache.h"
#include "lwip/opt.h"
#include "lwip/netif.h"
#include "lwip/udp.h"
#include "xil_printf.h"
extern struct netif *echo_netif;
void lwip_init();
}

static void IpToArray(const char* in, uint8* out) {
	uint32 n = 0u;
	uint32 i = 0u;
	out[0] = 0;
	while (in[i] != 0u) {
		if (in[i] == '.') {
			i++;
			n++;
			if (n > 3) {
				break;
			} else {
				out[n] = 0;
				continue;
			}
		}
		out[n] *= 10;
		out[n] += (in[i] - '0');
		i++;
	}

}

static void MacToArray(const char* in, uint8* out) {
	uint32 n = 0u;
	uint32 i = 0u;
	out[0] = 0;
	while (in[i] != 0u) {
		if (in[i] == ':') {
			i++;
			n++;
			if (n > 5) {
				break;
			} else {
				out[n] = 0;
				continue;
			}
		}
		out[n] <<= 4;
		char c = in[i];
		if (c >= '0' && c <= '9') {
			out[n] += (c - '0');
		} else if (c >= 'A' && c <= 'F') {
			out[n] += ((c - 'A') + 10);
		} else {
			//skip bad char
			out[n] >>= 4;
		}
		i++;
	}

}

static void recv_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p,
		ip_addr_t *addr, u16_t port) {
	/* do not read the packet if we are not in ESTABLISHED state */
	if (!p) {
		REPORT_ERROR_STATIC_0(ErrorManagement::Warning, "p is NULL!!");
		udp_recv(pcb, NULL, NULL);
		return;
	}

	//get the size to be processingPacket
	uint32 sizeToRead = *(uint32*) arg;
	uint32 recvBuffPtr = *(uint32*) ((char8*) arg + 4);
	volatile int32 *processingPacket = (volatile int32 *) (*(uint32*) ((char8*) arg + 8));


	//copy to the output buffer if
	//enough data has been processingPacket
	if (p->len >= sizeToRead) {
		Atomic::TestAndSet(processingPacket);
		//is one for sure!
		memcpy((void*) recvBuffPtr, p->payload, sizeToRead);
		Atomic::Decrement(processingPacket);
	}

	//TODO and the rest of the packet???
	/* free the processingPacket pbuf */
	pbuf_free(p);
}

int32 UDPCommunication::StartUdpTx() {

	struct ip_addr ipaddrStruct;
	err_t err;

	/* create new UDP PCB structure*/
	pcb = udp_new();
	if (!pcb) {
		REPORT_ERROR_STATIC_0(ErrorManagement::Warning,
				"Error allocating udp struc");
		return -1;
	}
	REPORT_ERROR_PARAMETERS(ErrorManagement::Warning, "hPort %d", port);

	err = udp_bind(pcb, IP_ADDR_ANY, port);
	if (err != 0) {
		REPORT_ERROR_STATIC_0(ErrorManagement::Warning, "Error bind udp");
		return err;
	}

	uint8 ipAddr[4];
	IpToArray(ipAddress.Buffer(), ipAddr);

	REPORT_ERROR_PARAMETERS(ErrorManagement::Warning, "hIp %d %d %d %d",
			ipAddr[0], ipAddr[1], ipAddr[2], ipAddr[3]);

	/* connect to host */
	IP4_ADDR(&ipaddrStruct, ipAddr[0], ipAddr[1], ipAddr[2], ipAddr[3]); /* host address */

	err = udp_connect(pcb, &ipaddrStruct, port);

	if (err != ERR_OK) {
		REPORT_ERROR_STATIC_0(ErrorManagement::Warning, "Error connect udp");
		return err;
	}

	return 0;
}

int32 UDPCommunication::TransferUdpData(void* send_buf, uint32 wsize) {
	//TODO This can be done better...
	xemacif_input(echo_netif);

	p = pbuf_alloc(PBUF_TRANSPORT, wsize, PBUF_RAM);
	if (!p)
		return ERR_MEM;

	memcpy(p->payload, send_buf, wsize);
	//REPORT_ERROR_PARAMETERS(ErrorManagement::Warning, "send %d %d",wsize, *(uint32*)(p->payload));

	udp_send(pcb, p);
	pbuf_free(p);

	return 0;
}

int32 UDPCommunication::ReceiveUdpData(void* recv_buf, uint32 rsize) {
//udp_recv_fn void *
//typedef void (*udp_recv_fn)(void *arg, struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *addr, u16_t port);
	if(!processingPacket){
		Atomic::TestAndSet(&processingPacket);
	}
	args[0] = rsize;
	args[1] = (uint32) recv_buf;
	args[2] = (uint32)(&processingPacket);
	udp_recv(pcb, &recv_callback, (void*) args);

//this is used just to set the function
	//blocking mode
	if (isBlocking) {
		while (processingPacket) {
			xemacif_input(echo_netif);
		}
	}
	else{
		xemacif_input(echo_netif);
	}
	//udp_recv(pcb, NULL, NULL);

}

UDPCommunication::UDPCommunication() :
		GenericStreamDriver() {
	port = 0;
	pcb = NULL;
	p = NULL;
	processingPacket = 1;
	args[0] = 0;
	args[1] = 0;
	args[2] = 0;
	isBlocking = 0u;
}

UDPCommunication::~UDPCommunication() {
	if (pcb) {
		udp_remove(pcb);
	}
	pcb = NULL;
}

bool UDPCommunication::Initialise(StructuredDataI &data) {
	bool ret = GenericStreamDriver::Initialise(data);
	if (ret) {

		if (!data.Read("IP_Address", ipAddress)) {
			REPORT_ERROR_STATIC_0(ErrorManagement::Warning,
					"IP_Address not set: using default 127.0.0.1");
			ipAddress = "127.0.0.1";
		}
		if (!data.Read("Port", port)) {
			REPORT_ERROR_STATIC_0(ErrorManagement::Warning,
					"port not set: using default 8080");
			port = 8080;
		}
		StreamString myIpAddress;
		if (!data.Read("My_IP_Address", myIpAddress)) {
			REPORT_ERROR_STATIC_0(ErrorManagement::Warning,
					"My_IP_Address not set: using default 127.0.0.1");
			myIpAddress = "127.0.0.1";
		}
		StreamString myNetmask;
		if (!data.Read("My_Netmask", myNetmask)) {
			REPORT_ERROR_STATIC_0(ErrorManagement::Warning,
					"My_Netmask not set: using default 255.255.255.0");
			myNetmask = "255.255.255.0";
		}
		StreamString myGateway;
		if (!data.Read("My_Gateway", myGateway)) {
			REPORT_ERROR_STATIC_0(ErrorManagement::Warning,
					"My_Gateway not set: using default 127.0.0.1");
			myGateway = "127.0.0.1";
		}
		uint32 myPort;
		if (!data.Read("My_Port", myPort)) {
			REPORT_ERROR_STATIC_0(ErrorManagement::Warning,
					"myPort not set: using default 8080");
			myPort = 8080;
		}
		if (!data.Read("My_MAC_Address", macEthernetAddress)) {
			REPORT_ERROR_STATIC_0(ErrorManagement::Warning,
					"My_MAC_Address not set: using default 0:0:0:0:0:0");
			macEthernetAddress = "0:0:0:0:0:0";
		}
		if (!data.Read("IsBlocking", isBlocking)) {
			REPORT_ERROR_STATIC_0(ErrorManagement::Warning,
					"My_MAC_Address not set: using default 0 (false)");
			isBlocking = 0u;
		}

		struct ip_addr ipaddrStruct, netmaskStruct, gwStruct;
		uint8 myIpArr[4];
		uint8 myNetmaskArr[4];
		uint8 myGatewayArr[4];

		IpToArray(myIpAddress.Buffer(), myIpArr);
		IpToArray(myNetmask.Buffer(), myNetmaskArr);
		IpToArray(myGateway.Buffer(), myGatewayArr);
		REPORT_ERROR_PARAMETERS(ErrorManagement::Warning, "myIp %d %d %d %d",
				myIpArr[0], myIpArr[1], myIpArr[2], myIpArr[3]);
		REPORT_ERROR_PARAMETERS(ErrorManagement::Warning, "myNm %d %d %d %d",
				myNetmaskArr[0], myNetmaskArr[1], myNetmaskArr[2],
				myNetmaskArr[3]);
		REPORT_ERROR_PARAMETERS(ErrorManagement::Warning, "myGw %d %d %d %d",
				myGatewayArr[0], myGatewayArr[1], myGatewayArr[2],
				myGatewayArr[3]);

		uint8 myMacArr[6];
		MacToArray(macEthernetAddress.Buffer(), myMacArr);

		REPORT_ERROR_PARAMETERS(ErrorManagement::Warning, "myMAC1 %d %d %d",
				myMacArr[0], myMacArr[1], myMacArr[2]);
		REPORT_ERROR_PARAMETERS(ErrorManagement::Warning, "myMAC2 %d %d %d",
				myMacArr[3], myMacArr[4], myMacArr[5]);

		/* initliaze IP addresses to be used */
		IP4_ADDR(&ipaddrStruct, myIpArr[0], myIpArr[1], myIpArr[2], myIpArr[3]);
		IP4_ADDR(&netmaskStruct, myNetmaskArr[0], myNetmaskArr[1],
				myNetmaskArr[2], myNetmaskArr[3]);
		IP4_ADDR(&gwStruct, myGatewayArr[0], myGatewayArr[1], myGatewayArr[2],
				myGatewayArr[3]);

		lwip_init();
		/* Add network interface to the netif_list, and set it as default */
		xemac_add(echo_netif, &ipaddrStruct, &netmaskStruct, &gwStruct,
				myMacArr,
				PLATFORM_EMAC_BASEADDR);

		netif_set_default(echo_netif);
		platform_enable_interrupts();
		netif_set_up(echo_netif);
		StartUdpTx();
	}

	return ret;
}

const char8 *UDPCommunication::GetBrokerName(StructuredDataI &data,
		const SignalDirection direction) {
	if (direction == InputSignals) {
		return "UDPCommunicationReader";
	}
	if (direction == OutputSignals) {
		return "UDPCommunicationWriter";
	}
	return "";
}

bool UDPCommunication::GetInputBrokers(ReferenceContainer &inputBrokers,
		const char8* const functionName, void * const gamMemPtr) {
	ReferenceT<UDPCommunicationReader> broker("UDPCommunicationReader");
	bool ret = broker.IsValid();
	if (ret) {
		ret = broker->Init(InputSignals, *this, functionName, gamMemPtr);
	}
	if (ret) {
		ret = inputBrokers.Insert(broker);
	}
	return ret;
}

bool UDPCommunication::GetOutputBrokers(ReferenceContainer &outputBrokers,
		const char8* const functionName, void * const gamMemPtr) {
	ReferenceT<UDPCommunicationWriter> broker("UDPCommunicationWriter");
	bool ret = broker.IsValid();
	if (ret) {
		ret = broker->Init(OutputSignals, *this, functionName, gamMemPtr);
	}
	if (ret) {
		ret = outputBrokers.Insert(broker);
	}
	return ret;
}

void UDPCommunication::Read(void *bufferToFill, uint32 &sizeToRead) {

}

void UDPCommunication::Write(void *bufferToFlush, uint32 &sizeToWrite) {
}

CLASS_REGISTER(UDPCommunication, "1.0")
